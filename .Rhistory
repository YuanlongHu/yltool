use_gpl3_license("Yuanlong Hu")
usethis::use_gpl3_license("Yuanlong Hu")
library(usethis)
use_package("immcp")
library(devtools)
library(usethis)
use_package(c("shiny","visNetwork","shinydashboard"))
use_package("shiny")
use_package("shinydashboard")
use_package("visNetwork")
use_package("stringr")
use_package("magrittr")
use_package("arules")
use_package("methods")
use_package("utils")
load_all()
AssoAnalysis()
AssoAnalysis()
load_all()
AssoAnalysis()
shinyApp(ui = app_ui_apr,
server = app_server_apr
)
shiny::shinyApp()
load_all()
AssoAnalysis()
load_all()
AssoAnalysis()
AssoAnalysis()
load_all()
AssoAnalysis()
load_all()
AssoAnalysis()
load_all()
AssoAnalysis()
load_all()
AssoAnalysis()
data <- read.csv("E:\\TCMTool\\无症状患者中药.csv")
datarules <- arules_apriori(data = data, minlen = 2, maxlen = 3)
da <- select_rule(data = datarules, support = 0.1, confidence = 0.5, lift = 1)
head(da)
network_plot(da, size="support")
data <- data[,-c(2,5:7)]
##########################################
data <- da
data <- data[,-c(2,5:7)]
data$lhs <- stringr::str_sub(data$lhs, start =  2, end = -2)
data$rhs <- stringr::str_sub(data$rhs, start =  2, end = -2)
data$ID <- paste0("node", c(1:nrow(data)))
data <- data[,c(1,2,4,3)]
data0 <- NULL
for (i in 1:nrow(data)) {
x <- as.character(data[i,])
x1 <- strsplit(x[1], split = ",")[[1]]
x1 <- data.frame(from = x1,
to=rep(x[3], length(x1)))
x2 <- data.frame(from = x[3],
to= x[2])
data1 <- rbind(x1, x2)
data0 <- rbind(data0, data1)
}
data0$arrows <- "to"
nodes <- unique(c(data0$from, data0$to))
nodes1 <- data.frame(id=nodes[nodes %in% data$ID],
label=nodes[nodes %in% data$ID],
size=data[,4]*60)
head(nodes)
head(data)
##########################################
data <- da
data <- data[,-c(2,5:7)]
data$lhs <- stringr::str_sub(data$lhs, start =  2, end = -2)
data$rhs <- stringr::str_sub(data$rhs, start =  2, end = -2)
data$ID <- paste0("node", c(1:nrow(data)))
data <- data[,c(1,2,4,3)]
head(data)
##########################################
data <- da
data <- data[,-c(2,5:7)]
data$lhs <- stringr::str_sub(data$lhs, start =  2, end = -2)
data$rhs <- stringr::str_sub(data$rhs, start =  2, end = -2)
data$ID <- paste0("node", c(1:nrow(data)))
head(data)
data <- data[,c(1,2,5,3)]
head(data)
data0 <- NULL
for (i in 1:nrow(data)) {
x <- as.character(data[i,])
x1 <- strsplit(x[1], split = ",")[[1]]
x1 <- data.frame(from = x1,
to=rep(x[3], length(x1)))
x2 <- data.frame(from = x[3],
to= x[2])
data1 <- rbind(x1, x2)
data0 <- rbind(data0, data1)
}
head(data0)
data0$arrows <- "to"
head(data0)
nodes <- unique(c(data0$from, data0$to))
head(nodes)
nodes1 <- data.frame(id=nodes[nodes %in% data$ID],
label=nodes[nodes %in% data$ID],
size=data[,4]*60)
nodes2 <- data.frame(id=nodes[!nodes %in% data$ID],
label=nodes[!nodes %in% data$ID],
size=40)
nodes <- rbind(nodes1, nodes2)
nodes$group <- ifelse(nodes$label %in% data$ID, "lightblue", "white")
nodes$label <- ifelse(nodes$label %in% data$ID, "", nodes$label)
network_plot <- visNetwork::visNetwork(nodes, data0) %>%
visNetwork::visEdges(shadow = F,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = "lightblue", highlight = "red")) %>%
visNetwork::visOptions(highlightNearest = TRUE, manipulation = TRUE) %>%
visNetwork::visGroups(groupname = "lightblue", color = "lightblue") %>%
visNetwork::visGroups(groupname = "white", color = "white", shape = "text", size=40) %>%
visNetwork::visInteraction(navigationButtons = TRUE, keyboard = FALSE) %>%
visNetwork::visIgraphLayout(layout = "layout_nicely") %>%
visNetwork::visExport()
library(magrittr)
network_plot <- visNetwork::visNetwork(nodes, data0) %>%
visNetwork::visEdges(shadow = F,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = "lightblue", highlight = "red")) %>%
visNetwork::visOptions(highlightNearest = TRUE, manipulation = TRUE) %>%
visNetwork::visGroups(groupname = "lightblue", color = "lightblue") %>%
visNetwork::visGroups(groupname = "white", color = "white", shape = "text", size=40) %>%
visNetwork::visInteraction(navigationButtons = TRUE, keyboard = FALSE) %>%
visNetwork::visIgraphLayout(layout = "layout_nicely") %>%
visNetwork::visExport()
network_plot
load_all()
network_plot(da, size="support")
AssoAnalysis()
head(da)
head(da)
load_all()
AssoAnalysis()
#############################################
data <- da
data <- data[,-c(2,5:8)]
data$lhs <- stringr::str_sub(data$lhs, start =  2, end = -2)
data$rhs <- stringr::str_sub(data$rhs, start =  2, end = -2)
data$ID <- paste0("node", c(1:nrow(data)))
head(data)
load_all()
AssoAnalysis()
convCorrMatrix <- function(mat, pmat) {
ut <- upper.tri(mat)
data.frame(
row = rownames(mat)[row(mat)[ut]],
column = rownames(mat)[col(mat)[ut]],
cor  =(mat)[ut],
p = pmat[ut]
)
}
usethis::use_package("Hmisc")
devtools::check()
usethis::use_package("DT")
devtools::document()
usethis::use_package("GSVA")
devtools::document()
usethis::use_package("xCell")
library(usethis)
use_package("biobase")
use_package("Biobase")
use_package("genefilter")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
use_package("Borute")
usethis::use_package("Boruta")
use_package("ggplot2")
use_package("ggsci")
document()
document()
document()
library(ggplot2)
use_package("ggpubr")
document()
rank(c(1:10))
order(c(1,1,2,2,10))
order(c(10,1,1,2,2))
rank(c(10,1,1,2,2))
order(rank(c(10,1,1,2,2)))
sort(c(5,3,2,1))
document()
document()
document()
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
use_package("FactoMineR")
use_package("factoextra")
ifelse(c(1:10) %in% NULL, 1, NA)
document()
document()
document()
document()
document()
document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("clusterProfiler")
usethis::use_package("ReactomePA")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("Rtsne")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
use_package("ROCR")
document()
library(devtools)
document()
document()
document()
